name: CI

on:
  push:
    branches: [main]
    paths-ignore:
      - ".github/**/*"
  workflow_dispatch:
    inputs:
      package-name:
        description: "Package to do a patch deployment of"
        required: true
        type: choice
        options:
          [
            "config-captain",
            "npm-status-messenger",
            "moviebot-telegram",
            "who-owes-who",
            "word-frequency-counter",
            "filter-split",
            "@henrypenton/uuid"
          ]
      deployment-type:
        description: "Type of deployment to do"
        required: true
        type: choice
        options: ["patch", "minor", "major"]

permissions:
  actions: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.CONTINUOUS_DEPLOYMENT }}

      - run: |
          git fetch
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git config --global user.name "ci"

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        id: cache_keys
        run: |
          npm_dependencies_cache_key=CI-test-and-build-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=test-and-build-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}
      - run: |
          pnpm test:coverage
          pnpm prettier:check
          pnpm lint:check

      - uses: nick-fields/retry@v3
        name: Continuous build
        if: ${{ github.event_name == 'push' }}
        with:
          max_attempts: 3
          retry_on: error
          timeout_minutes: 2
          command: |
            git pull
            affected_base=$(git describe --tags --abbrev=0)
            pnpx nx affected -t release-patch --base=$affected_base --head=HEAD --parallel=false
            pnpx nx affected -t tarball --base=$affected_base --head=HEAD --parallel=false

            git add -A
            if ! git diff-index --quiet HEAD --; then
              git commit -m"CI bump affected versions"
            fi

            pnpx nx affected -t tag:current --base=$affected_base --head=HEAD --parallel=false

            git push && git push --tags

      - uses: nick-fields/retry@v3
        if: ${{ github.event_name == 'workflow_dispatch' }}
        name: Requested build
        with:
          max_attempts: 3
          retry_on: error
          timeout_minutes: 2
          command: |

            git pull
            pnpx nx release-${{ inputs.deployment-type }} ${{ inputs.package-name }}
            pnpx nx tarball ${{ inputs.package-name }}
            git add -A
            git commit -m"CI ${{inputs.deployment-type}} bump ${{ inputs.package-name }}"
            pnpx nx tag:current ${{inputs.package-name}}
            git push && git push --tags

      - run: |
          SOURCE_DIR="./projects"
          DEST_DIR="./build"
          PATTERN="**/*.tgz"
          mkdir -p "$DEST_DIR"

          if compgen -G "$SOURCE_DIR/$PATTERN" > /dev/null; then
            cp "$SOURCE_DIR"/$PATTERN "$DEST_DIR"
            echo "Files matching pattern '$PATTERN' have been copied to '$DEST_DIR'."
            else
                echo "No files matching pattern '$PATTERN' found in '$SOURCE_DIR'."
                touch $DEST_DIR/placeholder 
          fi

          SHARED_SOURCE_DIR="./shared"
          if compgen -G "$SHARED_SOURCE_DIR/$PATTERN" > /dev/null; then
            cp "$SHARED_SOURCE_DIR"/$PATTERN "$DEST_DIR"
            echo "Files matching pattern '$PATTERN' have been copied to '$DEST_DIR'."
            else
                echo "No files matching pattern '$PATTERN' found in '$SHARED_SOURCE_DIR'."
                touch $DEST_DIR/placeholder 
          fi
        name: Copy tarballs to build folder

      - uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: projects/**/coverage

      - uses: actions/upload-artifact@v4
        id: upload_build_artifacts
        with:
          name: build-artifacts
          path: ./build

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.CACHE_DELETION }}
