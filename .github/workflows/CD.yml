name: CD

on:
  workflow_run:
    workflows: [Staging, Lab]
    types:
      - completed

permissions:
  actions: write

jobs:
  # build-and-test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Use Node.js 22
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22

  #     - uses: pnpm/action-setup@v3
  #       with:
  #         version: latest

  #     - name: Generate cache keys
  #       id: cache_keys
  #       run: |
  #         npm_dependencies_cache_key=CD-build-and-test-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
  #         nx_cache_key=${{ runner.os }}-CD-build-and-test-nx-${{ hashFiles('nx.json') }}

  #         echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
  #         echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

  #     - name: Restore cached npm dependencies
  #       id: cache_dependencies
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           **/node_modules
  #         key: ${{ env.npm_dependencies_cache_key }}

  #     - name: Restore nx cache
  #       id: cache_nx
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           .nx
  #         key: ${{ env.nx_cache_key }}

  #     - name: install dependencies
  #       if: steps.cache_dependencies.outputs.cache-hit != 'true'
  #       run: pnpm install --frozen-lockfile

  #     - name: Cache npm dependencies
  #       if: steps.cache_dependencies.outputs.cache-hit != 'true'
  #       uses: actions/cache/save@v4
  #       with:
  #         path: |
  #           **/node_modules
  #         key: ${{ env.npm_dependencies_cache_key }}

  #     - run: |
  #         pnpm build
  #         pnpm test:coverage
  #         pnpm tarball

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage reports
  #         path: ./projects/**/coverage

  #     - uses: actions/upload-artifact@v4
  #       name: upload build artifacts
  #       with:
  #         name: build-artifacts
  #         path: projects/**/*.tgz

  #     - name: Delete existing nx cache
  #       run: |
  #         gh extension install actions/gh-actions-cache
  #         gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
  #       if: steps.cache_nx.outputs.cache-hit == 'true'
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Cache nx
  #       uses: actions/cache/save@v4
  #       with:
  #         path: |
  #           .nx
  #         key: ${{ env.nx_cache_key }}
  # formatting:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Use Node.js 22
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22

  #     - uses: pnpm/action-setup@v3
  #       with:
  #         version: latest

  #     - name: Generate nx cache key
  #       run: |
  #         nx_cache_key=${{ runner.os }}-formatting-nx-${{ hashFiles('nx.json') }}
  #         npm_dependencies_cache_key=formatting-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}

  #         echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"
  #         echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"

  #     - name: Restore cached npm dependencies
  #       id: cache_dependencies
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           **/node_modules
  #         key: ${{ env.npm_dependencies_cache_key }}

  #     - name: Restore nx cache
  #       id: cache_nx
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           .nx
  #         key: ${{ env.nx_cache_key }}

  #     - name: install dependencies
  #       if: steps.cache_dependencies.outputs.cache-hit != 'true'
  #       run: pnpm install --frozen-lockfile

  #     - name: Formatting
  #       run: |
  #         pnpm prettier:check
  #         pnpm lint:check

  #     - name: Delete existing nx cache
  #       run: |
  #         gh extension install actions/gh-actions-cache
  #         gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
  #       if: steps.cache_nx.outputs.cache-hit == 'true'
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Cache nx
  #       uses: actions/cache/save@v4
  #       with:
  #         path: |
  #           .nx
  #         key: ${{ env.nx_cache_key }}
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./dummy
          run-id: ${{ github.event.workflow_run.id }}

      - run: ls dummy
      # - name: Extract package name from tag
      #   id: extract_package_name
      #   run: |
      #     tag=${{ github.ref_name }}
      #     package_name=$(echo "$tag" | cut -d'@' -f1)
      #     package_version=$(echo "$tag" | cut -d'@' -f2)
      #     echo "package_name=$package_name" >> "$GITHUB_ENV"
      #     echo "package_version=$package_version" >> "$GITHUB_ENV"

      # - run: npm publish ./build/$package_name/$package_name-$package_version.tgz --dry-run
      #   name: Publish to NPM
      #   env:
      #     NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
