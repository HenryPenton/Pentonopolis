name: Monorepo Health

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]
  schedule:
    - cron: "45 7 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.test.outputs.matrix }}

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        run: |
          npm_dependencies_cache_key=npm-${{ matrix.node-version }}-monorepo-health-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ matrix.node-version }}-${{ runner.os }}-monorepo-health-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Monorepo health
        run: |
          pnpm dependencies:check
          pnpm vulnerabilities:check

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.CACHE_DELETE }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - uses: actions/upload-artifact@v4
        with:
          name: outdated reports
          path: |
            ./**/outdated.json
            !node_modules

      - uses: actions/upload-artifact@v4
        with:
          name: audit reports
          path: ./audit.json
      - name: Generate matrix
        id: test
        run: |
          directory="./"
          file_name="outdated.json"
          directories=()

          while IFS= read -r -d '' file; do
              folder=$(dirname "$file")
              directories+=("$folder")
          done < <(find "$directory" -type f -name "$file_name" -print0)

          escaped_directories=$(printf '%s\n' "${directories[@]}" | jq -R . | jq -s -c .)

          echo "matrix=$escaped_directories" >> $GITHUB_OUTPUT
          echo "$escaped_directories"
  use-matrix:
    name: Use Matrix
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: ${{fromJson(needs.build.outputs.matrix)}}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: outdated reports
          path: .

      - name: Use directory from matrix
        run: |
          cat ${{ matrix.directory }}/outdated.json
