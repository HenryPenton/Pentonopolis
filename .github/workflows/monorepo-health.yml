name: Monorepo Health

on:
  schedule:
    - cron: "45 7 */2 * *"
  workflow_dispatch:

permissions:
  actions: write

jobs:
  health:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.test.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        run: |
          npm_dependencies_cache_key=health-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Monorepo health
        run: |
          pnpm dependencies:check
          pnpm vulnerabilities:check

      - uses: actions/upload-artifact@v4
        with:
          name: outdated-reports
          path: |
            ./**/outdated.json
            !node_modules

      - uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: ./audit.json
      - name: Generate matrix
        id: test
        run: |
          directory="./"
          file_name="outdated.json"
          directories=()

          while IFS= read -r -d '' file; do
              folder=$(dirname "$file")
              directories+=("$folder")
          done < <(find "$directory" -type f -name "$file_name" -print0)

          escaped_directories=$(printf '%s\n' "${directories[@]}" | jq -R . | jq -s -c .)

          echo "matrix=$escaped_directories" >> $GITHUB_OUTPUT
          echo "$escaped_directories"
  outdated:
    name: outdated
    needs: health
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: ${{fromJson(needs.health.outputs.matrix)}}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: outdated-reports
          path: .

      - name: Print outdated modules for ${{ matrix.directory }}
        run: |
          cat ${{ matrix.directory }}/outdated.json
      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Send outdated
        run: |
          pnpx npm-status-messenger --outdated ${{matrix.directory}}/outdated.json
        env:
          TELEGRAM_API_URL: https://api.telegram.org/
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_TO }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}

  audit:
    name: audit
    needs: [health, outdated]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: audit-report
          path: .

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Send audit
        run: |
          pnpx npm-status-messenger --audit ./audit.json
        env:
          TELEGRAM_API_URL: https://api.telegram.org/
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_TO }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
