name: Check Specific Workflow Approval

on:
  schedule:
    - cron: "*/5 0-6 * * *" # Every 5 minutes from midnight to 6:59 AM
    - cron: "*/15 7-23 * * *" # Every 15 minutes from 7:00 AM to 11:59 PM
  workflow_dispatch:

jobs:
  check-approvals:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check for pending approvals
        env:
          GITHUB_TOKEN: ${{ secrets.TRIGGER }}
        run: |
          REPO="henrypenton/pentonopolis"  # replace with your repository
          WORKFLOW_ID="CD.yml"  # replace with your workflow file name
          HEADERS="Authorization: token $GITHUB_TOKEN"
          API_VERSION_HEADER="X-GitHub-Api-Version: 2022-11-28"
          ACCEPT_HEADER="Accept: application/vnd.github+json"

          while true; do
            # Get workflow runs
            response=$(curl -s -H "$HEADERS" -H "$API_VERSION_HEADER" -H "$ACCEPT_HEADER" "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs")

            # Parse the workflow runs
            pending_runs=$(echo $response | jq '[.workflow_runs[] | select(.status == "waiting" and .conclusion == null)]')
            running_runs=$(echo $response | jq '[.workflow_runs[] | select(.status == "in_progress")]')

            if [ $(echo $running_runs | jq 'length') -gt 0 ]; then
              echo "There are currently running runs, approval will not be triggered."
              sleep 60
            elif [ $(echo $pending_runs | jq 'length') -gt 0 ]; then
              # Sort pending runs by creation date and get the oldest one
              oldest_triggering_workflow_run=$(echo $pending_runs | jq -r 'sort_by(.triggering_workflow_run.started_at) | reverse | .[0]')
              run_id=$(echo $oldest_triggering_workflow_run | jq -r '.id')

              # Get pending deployments for the run
              pending_deployments=$(curl -s -H "$HEADERS" -H "$API_VERSION_HEADER" -H "$ACCEPT_HEADER" "https://api.github.com/repos/$REPO/actions/runs/$run_id/pending_deployments")

              if [ $(echo $pending_deployments | jq 'length') -gt 0 ]; then
                environment_id=$(echo $pending_deployments | jq -r '.[0].environment.id')
                deployment_id=$(echo $pending_deployments | jq -r '.[0].id')

                # Approve the pending deployment
                approve_response=$(curl -s -X POST -H "$HEADERS" -H "$API_VERSION_HEADER" -H "$ACCEPT_HEADER" -d '{"state":"approved","comment":"Ship it!","environment_ids":['"${{secrets.ENVIRONMENT_ID}}"']}' "https://api.github.com/repos/$REPO/actions/runs/$run_id/pending_deployments")

                if [ $? -eq 0 ]; then
                  echo "Approved deployment for run: $run_id"
                else
                  echo "Failed to approve deployment for run: $run_id"
                  echo "Response: $approve_response"
                fi
              else
                echo "No pending deployments for the specified run."
              fi
            else
              echo "No pending approvals found."
              break
            fi
          done
