name: Check Specific Workflow Approval

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch:

permissions:
  actions: write

jobs:
  check-approvals:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Check for pending approvals
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import os
          import requests
          from datetime import datetime

          GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
          REPO = 'henrypenton/pentonopolis'
          WORKFLOW_ID = 'test-deploy.yml'
          HEADERS = {
              'Authorization': f'token {GITHUB_TOKEN}',
              'Accept': 'application/vnd.github.v3+json'
          }

          def get_pending_approvals():
              url = f'https://api.github.com/repos/{REPO}/actions/workflows/{WORKFLOW_ID}/runs'
              response = requests.get(url, headers=HEADERS)
              response.raise_for_status()
              runs = response.json()['workflow_runs']
              pending_runs = [run for run in runs if run['status'] == 'waiting' and run['conclusion'] is None]
              running_runs = [run for run in runs if run['status'] == 'in_progress']
              return pending_runs, running_runs

          def approve_run(run_id):
              url = f'https://api.github.com/repos/{REPO}/actions/runs/{run_id}/approve'
              response = requests.post(url, headers=HEADERS)
              response.raise_for_status()
              print(f'Approved run: {run_id}')

          pending_runs, running_runs = get_pending_approvals()
          if running_runs:
              print('There are currently running runs, approval will not be triggered.')
          elif pending_runs:
              pending_runs.sort(key=lambda run: datetime.strptime(run['created_at'], '%Y-%m-%dT%H:%M:%SZ'))
              longest_waiting_run = pending_runs[0]
              approve_run(longest_waiting_run['id'])
          else:
              print('No pending approvals found')
          "
