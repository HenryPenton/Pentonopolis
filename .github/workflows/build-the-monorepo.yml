name: Build the Monorepo

on:
  push:
    branches: [main]
    tags:
      - "*"
  workflow_dispatch:

permissions:
  actions: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        id: cache_keys
        run: |
          npm_dependencies_cache_key=npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ runner.os }}-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - run: |
          pnpm build
          pnpm test:coverage
          pnpm tarball

      - uses: actions/upload-artifact@v4
        with:
          name: coverage reports
          path: ./projects/**/coverage

      - uses: actions/upload-artifact@v4
        name: upload build artifacts
        with:
          name: build-artifacts
          path: projects/**/*.tgz

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}
  formatting:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate nx cache key
        run: |
          nx_cache_key=${{ runner.os }}-formatting-nx-${{ hashFiles('nx.json') }}
          npm_dependencies_cache_key=npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}

          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"
          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Formatting
        run: |
          pnpm prettier:check
          pnpm lint:check

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

  version-bump:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [build-and-test, formatting]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.CONTINUOUS_DEPLOYMENT }}

      - run: |
          git fetch
          git describe --tags --abbrev=0
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git config --global user.name "ci"

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        run: |
          npm_dependencies_cache_key=version-bump-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ runner.os }}-continuous-deploy-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Bump Affected packages
        run: |
          pnpx nx affected -t release-patch --base=$(git describe --tags --abbrev=0) --head=HEAD --parallel=false
  publish:
    runs-on: ubuntu-latest
    needs: [build-and-test, formatting]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        id: cache_keys
        run: |
          npm_dependencies_cache_key=publish-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ runner.os }}-nx-publish-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - run: git fetch
      - run: git checkout main

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: $npm_dependencies_cache_key

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: $nx_cache_key

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./builds

      - name: Extract package name from tag
        id: extract_package_name
        run: |
          tag=${{ github.ref_name }}
          package_name=$(echo "$tag" | cut -d'@' -f1)
          package_version=$(echo "$tag" | cut -d'@' -f2)
          echo "package_name=$package_name" >> "$GITHUB_ENV"
          echo "package_version=$package_version" >> "$GITHUB_ENV"
          echo $package_version
          ls builds

      - run: pnpx nx deploy $package_name
        name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
