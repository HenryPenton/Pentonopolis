name: Build the Monorepo

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      npm_dependencies_cache_key: ${{ steps.cache_keys.outputs.npm_dependencies_cache_key }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        id: cache_keys
        run: |
          npm_dependencies_cache_key=npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ runner.os }}-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> $GITHUB_OUTPUT
          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}
  mutate:
    runs-on: ubuntu-latest
    needs: build
    env:
      npm_dependencies_cache_key: ${{needs.build.outputs.npm_dependencies_cache_key}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/

      - uses: pnpm/action-setup@v3
        with:
          version: latest
      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Generate nx cache key
        id: cache_keys
        run: |
          nx_cache_key=${{ runner.os }}-nx-mutate-${{ hashFiles('nx.json') }}
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - run: pnpm mutate

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - uses: actions/upload-artifact@v4
        with:
          name: mutation reports
          path: ./**/mutation.html
  coverage:
    runs-on: ubuntu-latest
    needs: build
    env:
      npm_dependencies_cache_key: ${{needs.build.outputs.npm_dependencies_cache_key}}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate nx cache key
        run: |
          nx_cache_key=${{ runner.os }}-coverage-nx-${{ hashFiles('nx.json') }}
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Test Coverage
        run: |
          pnpm test:coverage

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - uses: actions/upload-artifact@v4
        with:
          name: coverage reports
          path: ./projects/**/coverage
  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      npm_dependencies_cache_key: ${{needs.build.outputs.npm_dependencies_cache_key}}
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        run: |
          nx_cache_key=${{ matrix.node-version }}-${{ runner.os }}-test-and-build-nx-${{ hashFiles('nx.json') }}
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Test
        run: |
          pnpm test

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}
  formatting:
    runs-on: ubuntu-latest
    needs: build
    env:
      npm_dependencies_cache_key: ${{needs.build.outputs.npm_dependencies_cache_key}}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        run: |
          nx_cache_key=${{ runner.os }}-formatting-nx-${{ hashFiles('nx.json') }}
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Formatting
        run: |
          pnpm prettier:check
          pnpm lint:check

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}
  continuous-deploy:
    runs-on: ubuntu-latest
    needs: [build, test, mutate, coverage, formatting]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.CONTINUOUS_DEPLOYMENT }}

      - run: |
          git fetch
          git describe --tags --abbrev=0
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git config --global user.name "ci"

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        run: |
          npm_dependencies_cache_key=npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ runner.os }}-coverage-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Bump Affected packages
        run: |
          pnpx nx affected -t release-patch --base=$(git describe --tags --abbrev=0) --head=HEAD --parallel=false
