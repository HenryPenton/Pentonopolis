name: CI

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      package-name:
        description: "Package to do a patch deployment of"
        required: true
        type: choice
        options:
          [
            "config-captain",
            "npm-status-messenger",
            "moviebot-telegram",
            "who-owes-who",
            "word-frequency-counter"
          ]
      deployment-type:
        description: "Type of deployment to do"
        required: true
        type: choice
        options: ["patch", "minor", "major"]

permissions:
  actions: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.CONTINUOUS_DEPLOYMENT }}

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        id: cache_keys
        run: |
          npm_dependencies_cache_key=CI-test-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ runner.os }}-CI-test-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"
          echo ${{ github.run_id }}

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - run: |
          affected_base=$(git describe --tags --abbrev=0)
          pnpx nx affected -t release-patch --base=$affected_base --head=HEAD --parallel=false
          pnpx nx affected -t test:coverage --base=$affected_base --head=HEAD --parallel=false
          pnpx nx affected -t tarball --base=$affected_base --head=HEAD --parallel=false
        name: Continuous build
        if: ${{ github.event_name == 'push' }}

      - run: |
          pnpx nx release-${{ inputs.deployment-type }} ${{ inputs.package-name }}
          pnpx nx test:coverage ${{ inputs.package-name }}
          pnpx nx tarball ${{ inputs.package-name }}
        name: Requested build
        if: ${{ github.event_name == 'workflow_dispatch' }}

      - run: |
          SOURCE_DIR="./projects"
          DEST_DIR="./build"
          PATTERN="**/*.tgz"
          mkdir -p "$DEST_DIR"

          if compgen -G "$SOURCE_DIR/$PATTERN" > /dev/null; then
            cp "$SOURCE_DIR"/$PATTERN "$DEST_DIR"
            echo "Files matching pattern '$PATTERN' have been copied to '$DEST_DIR'."
            else
                echo "No files matching pattern '$PATTERN' found in '$SOURCE_DIR'."
                touch $DEST_DIR/placeholder 
            fi
        name: Copy tarballs to build folder

      - uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: projects/**/coverage

      - uses: actions/upload-artifact@v4
        id: upload_build_artifacts
        with:
          name: build-artifacts
          path: ./build

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

  formatting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate nx cache key
        run: |
          nx_cache_key=${{ runner.os }}-formatting-nx-${{ hashFiles('nx.json') }}
          npm_dependencies_cache_key=formatting-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}

          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"
          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo ${{ github.run_id }}

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Formatting
        run: |
          pnpm prettier:check
          pnpm lint:check

      - name: Delete existing nx cache
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.nx_cache_key }} --confirm || true
        if: steps.cache_nx.outputs.cache-hit == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache nx
        uses: actions/cache/save@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}
  version-bump:
    runs-on: ubuntu-latest
    needs: [test-and-build, formatting]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.CONTINUOUS_DEPLOYMENT }}

      - run: |
          git fetch
          git describe --tags --abbrev=0
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git config --global user.name "ci"

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Generate cache keys
        run: |
          npm_dependencies_cache_key=version-bump-npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
          nx_cache_key=${{ runner.os }}-version-bump-nx-${{ hashFiles('nx.json') }}

          echo "npm_dependencies_cache_key=$npm_dependencies_cache_key" >> "$GITHUB_ENV"
          echo "nx_cache_key=$nx_cache_key" >> "$GITHUB_ENV"

      - name: Restore cached npm dependencies
        id: cache_dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Restore nx cache
        id: cache_nx
        uses: actions/cache/restore@v4
        with:
          path: |
            .nx
          key: ${{ env.nx_cache_key }}

      - name: install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache npm dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
          key: ${{ env.npm_dependencies_cache_key }}

      - name: Continuous version bump
        if: ${{ github.event_name == 'push' }}
        run: |
          git pull
          pnpx nx affected -t release-patch --base=$(git describe --tags --abbrev=0) --head=HEAD --parallel=false
          git add -A
          if ! git diff-index --quiet HEAD --; then
            git commit -m"CI bump affected versions"
          fi

          pnpx nx affected -t tag:current --base=$(git describe --tags --abbrev=0) --head=HEAD --parallel=false

          git push && git push --tags

      - name: Requested version bump
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          git pull
          pnpx nx release-${{ inputs.deployment-type }} ${{ inputs.package-name }}
          git add -A
          git commit -m"CI ${{inputs.deployment-type}} bump ${{ inputs.package-name }}"
          pnpx nx tag:current ${{inputs.package-name}}
          git push && git push --tags
  publish:
    needs: [version-bump]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build
          github-token: ${{ github.token }}

      - run: |
          for FILE in ./build/*.tgz; do
            if [ -e "$FILE" ]; then
                npm publish $FILE
            fi
          done
        name: Publish NPM modules
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}